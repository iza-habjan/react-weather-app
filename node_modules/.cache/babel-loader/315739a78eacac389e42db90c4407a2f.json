{"ast":null,"code":"const fs = require(\"fs\").promises;\n\nconst fss = require(\"fs\");\n\nconst rimraf = require(\"rimraf\");\n\nconst SVGOptimizer = require(\"svgo\");\n\nconst OPTIMIZED_ICONS = {};\nconst ICONS_MAP = {\n  all: {},\n  darksky: {\n    \"clear-day\": \"clear-day\",\n    \"clear-night\": \"clear-night\",\n    \"cloudy\": \"cloudy\",\n    \"drizzle\": \"drizzle\",\n    \"fog\": \"mist\",\n    \"hail\": \"hail\",\n    \"partly-cloudy-day\": \"partly-cloudy-day\",\n    \"partly-cloudy-day-rain\": \"partly-cloudy-day-rain\",\n    \"partly-cloudy-night\": \"partly-cloudy-night\",\n    \"partly-cloudy-night-rain\": \"partly-cloudy-night-rain\",\n    \"rain\": \"rain\",\n    \"sleet\": \"sleet\",\n    \"snow\": \"snow\",\n    \"thunderstorm\": \"thunderstorms\",\n    \"tornado\": \"tornado\",\n    \"wind\": \"wind\"\n  },\n  openweathermap: {\n    \"01d\": \"clear-day\",\n    \"01n\": \"clear-night\",\n    \"02d\": \"partly-cloudy-day\",\n    \"02n\": \"partly-cloudy-night\",\n    \"03d\": \"cloudy\",\n    \"03n\": \"cloudy\",\n    \"04d\": \"cloudy\",\n    \"04n\": \"cloudy\",\n    \"09d\": \"rain\",\n    \"09n\": \"rain\",\n    \"10d\": \"partly-cloudy-day-rain\",\n    \"10n\": \"partly-cloudy-night-rain\",\n    \"11d\": \"thunderstorms\",\n    \"11n\": \"thunderstorms\",\n    \"13d\": \"partly-cloudy-day-snow\",\n    \"13n\": \"partly-cloudy-day-snow\",\n    \"50d\": \"mist\",\n    \"50n\": \"mist\"\n  }\n};\n\nfunction initializeSvgOptimizer() {\n  return new SVGOptimizer({\n    plugins: [{\n      cleanupAttrs: true\n    }, {\n      removeDoctype: true\n    }, {\n      removeXMLProcInst: true\n    }, {\n      removeComments: true\n    }, {\n      removeMetadata: true\n    }, {\n      removeTitle: true\n    }, {\n      removeDesc: true\n    }, {\n      removeUselessDefs: true\n    }, {\n      removeEditorsNSData: true\n    }, {\n      removeEmptyAttrs: true\n    }, {\n      removeHiddenElems: true\n    }, {\n      removeEmptyText: true\n    }, {\n      removeEmptyContainers: true\n    }, {\n      removeViewBox: false\n    }, {\n      cleanupEnableBackground: true\n    }, {\n      convertStyleToAttrs: true\n    }, {\n      convertColors: true\n    }, {\n      convertPathData: true\n    }, {\n      convertTransform: true\n    }, {\n      removeUnknownsAndDefaults: true\n    }, {\n      removeNonInheritableGroupAttrs: true\n    }, {\n      removeUselessStrokeAndFill: true\n    }, {\n      removeUnusedNS: true\n    }, {\n      cleanupIDs: true\n    }, {\n      cleanupNumericValues: true\n    }, {\n      moveElemsAttrsToGroup: true\n    }, {\n      moveGroupAttrsToElems: true\n    }, {\n      collapseGroups: false\n    }, {\n      removeRasterImages: false\n    }, {\n      mergePaths: true\n    }, {\n      convertShapeToPath: true\n    }, {\n      sortAttrs: true\n    }, {\n      removeDimensions: true\n    }]\n  });\n}\n\nconst svgo = initializeSvgOptimizer();\n\nasync function copyIcon(type, provider, name, icon) {\n  const dir = `./production/${type}/${provider}`;\n  const path = `${dir}/${name}.svg`;\n  if (!fss.existsSync(dir)) await fs.mkdir(dir);\n\n  if (OPTIMIZED_ICONS[type] && OPTIMIZED_ICONS[type][icon]) {\n    console.log(`Creating ${name} for ${provider}...`);\n    await fs.writeFile(path, OPTIMIZED_ICONS[type][icon], {\n      encoding: \"utf8\"\n    });\n  } else {\n    console.error(`Could not find icon ${icon} (> ${name}) for ${type}!`);\n  }\n}\n\nasync function optimizeIcon(type, icon) {\n  console.log(`Optimizing icon ${icon}...`);\n  const path = `./design/${type}/animation-ready/${icon}.svg`;\n  const svg = await fs.readFile(path, {\n    encoding: \"utf8\"\n  });\n  const {\n    data\n  } = await svgo.optimize(svg, {\n    path\n  });\n  OPTIMIZED_ICONS[type][icon] = data;\n}\n\nasync function run() {\n  await new Promise(resolve => rimraf(\"./production/*\", resolve));\n\n  for (let type of [\"line\", \"fill\"]) {\n    await fs.mkdir(`./production/${type}`);\n    const icons = (await fs.readdir(`./design/${type}/animation-ready`)).filter(icon => icon !== \".DS_Store\").map(icon => icon.substr(0, icon.length - 4));\n    OPTIMIZED_ICONS[type] = {};\n\n    for (let icon of icons) {\n      ICONS_MAP.all[icon] = icon;\n      await optimizeIcon(type, icon);\n    }\n\n    for (let provider in ICONS_MAP) for (let name in ICONS_MAP[provider]) await copyIcon(type, provider, name, ICONS_MAP[provider][name]);\n  }\n}\n\nrun().then(() => console.log(\"Done!\")).catch(err => console.error(err));","map":{"version":3,"sources":["/Users/iza/SheCodes/react-weather-app/node_modules/@bybas/weather-icons/index.js"],"names":["fs","require","promises","fss","rimraf","SVGOptimizer","OPTIMIZED_ICONS","ICONS_MAP","all","darksky","openweathermap","initializeSvgOptimizer","plugins","cleanupAttrs","removeDoctype","removeXMLProcInst","removeComments","removeMetadata","removeTitle","removeDesc","removeUselessDefs","removeEditorsNSData","removeEmptyAttrs","removeHiddenElems","removeEmptyText","removeEmptyContainers","removeViewBox","cleanupEnableBackground","convertStyleToAttrs","convertColors","convertPathData","convertTransform","removeUnknownsAndDefaults","removeNonInheritableGroupAttrs","removeUselessStrokeAndFill","removeUnusedNS","cleanupIDs","cleanupNumericValues","moveElemsAttrsToGroup","moveGroupAttrsToElems","collapseGroups","removeRasterImages","mergePaths","convertShapeToPath","sortAttrs","removeDimensions","svgo","copyIcon","type","provider","name","icon","dir","path","existsSync","mkdir","console","log","writeFile","encoding","error","optimizeIcon","svg","readFile","data","optimize","run","Promise","resolve","icons","readdir","filter","map","substr","length","then","catch","err"],"mappings":"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","sourcesContent":["const fs = require(\"fs\").promises;\nconst fss = require(\"fs\");\nconst rimraf = require(\"rimraf\");\nconst SVGOptimizer = require(\"svgo\");\n\nconst OPTIMIZED_ICONS = {};\nconst ICONS_MAP = {\n\tall: {},\n\tdarksky: {\n\t\t\"clear-day\": \"clear-day\",\n\t\t\"clear-night\": \"clear-night\",\n\t\t\"cloudy\": \"cloudy\",\n\t\t\"drizzle\": \"drizzle\",\n\t\t\"fog\": \"mist\",\n\t\t\"hail\": \"hail\",\n\t\t\"partly-cloudy-day\": \"partly-cloudy-day\",\n\t\t\"partly-cloudy-day-rain\": \"partly-cloudy-day-rain\",\n\t\t\"partly-cloudy-night\": \"partly-cloudy-night\",\n\t\t\"partly-cloudy-night-rain\": \"partly-cloudy-night-rain\",\n\t\t\"rain\": \"rain\",\n\t\t\"sleet\": \"sleet\",\n\t\t\"snow\": \"snow\",\n\t\t\"thunderstorm\": \"thunderstorms\",\n\t\t\"tornado\": \"tornado\",\n\t\t\"wind\": \"wind\"\n\t},\n\topenweathermap: {\n\t\t\"01d\": \"clear-day\",\n\t\t\"01n\": \"clear-night\",\n\t\t\"02d\": \"partly-cloudy-day\",\n\t\t\"02n\": \"partly-cloudy-night\",\n\t\t\"03d\": \"cloudy\",\n\t\t\"03n\": \"cloudy\",\n\t\t\"04d\": \"cloudy\",\n\t\t\"04n\": \"cloudy\",\n\t\t\"09d\": \"rain\",\n\t\t\"09n\": \"rain\",\n\t\t\"10d\": \"partly-cloudy-day-rain\",\n\t\t\"10n\": \"partly-cloudy-night-rain\",\n\t\t\"11d\": \"thunderstorms\",\n\t\t\"11n\": \"thunderstorms\",\n\t\t\"13d\": \"partly-cloudy-day-snow\",\n\t\t\"13n\": \"partly-cloudy-day-snow\",\n\t\t\"50d\": \"mist\",\n\t\t\"50n\": \"mist\"\n\t}\n};\n\nfunction initializeSvgOptimizer()\n{\n\treturn new SVGOptimizer({\n\t\tplugins: [\n\t\t\t{cleanupAttrs: true},\n\t\t\t{removeDoctype: true},\n\t\t\t{removeXMLProcInst: true},\n\t\t\t{removeComments: true},\n\t\t\t{removeMetadata: true},\n\t\t\t{removeTitle: true},\n\t\t\t{removeDesc: true},\n\t\t\t{removeUselessDefs: true},\n\t\t\t{removeEditorsNSData: true},\n\t\t\t{removeEmptyAttrs: true},\n\t\t\t{removeHiddenElems: true},\n\t\t\t{removeEmptyText: true},\n\t\t\t{removeEmptyContainers: true},\n\t\t\t{removeViewBox: false},\n\t\t\t{cleanupEnableBackground: true},\n\t\t\t{convertStyleToAttrs: true},\n\t\t\t{convertColors: true},\n\t\t\t{convertPathData: true},\n\t\t\t{convertTransform: true},\n\t\t\t{removeUnknownsAndDefaults: true},\n\t\t\t{removeNonInheritableGroupAttrs: true},\n\t\t\t{removeUselessStrokeAndFill: true},\n\t\t\t{removeUnusedNS: true},\n\t\t\t{cleanupIDs: true},\n\t\t\t{cleanupNumericValues: true},\n\t\t\t{moveElemsAttrsToGroup: true},\n\t\t\t{moveGroupAttrsToElems: true},\n\t\t\t{collapseGroups: false},\n\t\t\t{removeRasterImages: false},\n\t\t\t{mergePaths: true},\n\t\t\t{convertShapeToPath: true},\n\t\t\t{sortAttrs: true},\n\t\t\t{removeDimensions: true}\n\t\t]\n\t});\n}\n\nconst svgo = initializeSvgOptimizer();\n\nasync function copyIcon(type, provider, name, icon)\n{\n\tconst dir = `./production/${type}/${provider}`;\n\tconst path = `${dir}/${name}.svg`;\n\n\tif (!fss.existsSync(dir))\n\t\tawait fs.mkdir(dir);\n\n\tif (OPTIMIZED_ICONS[type] && OPTIMIZED_ICONS[type][icon])\n\t{\n\t\tconsole.log(`Creating ${name} for ${provider}...`);\n\n\t\tawait fs.writeFile(path, OPTIMIZED_ICONS[type][icon], {encoding: \"utf8\"});\n\t}\n\telse\n\t{\n\t\tconsole.error(`Could not find icon ${icon} (> ${name}) for ${type}!`);\n\t}\n}\n\nasync function optimizeIcon(type, icon)\n{\n\tconsole.log(`Optimizing icon ${icon}...`);\n\n\tconst path = `./design/${type}/animation-ready/${icon}.svg`;\n\tconst svg = await fs.readFile(path, {encoding: \"utf8\"});\n\n\tconst {data} = await svgo.optimize(svg, {path});\n\n\tOPTIMIZED_ICONS[type][icon] = data;\n}\n\nasync function run()\n{\n\tawait new Promise(resolve => rimraf(\"./production/*\", resolve));\n\n\tfor (let type of [\"line\", \"fill\"])\n\t{\n\t\tawait fs.mkdir(`./production/${type}`);\n\n\t\tconst icons = (await fs.readdir(`./design/${type}/animation-ready`))\n\t\t\t.filter(icon => icon !== \".DS_Store\")\n\t\t\t.map(icon => icon.substr(0, icon.length - 4));\n\n\t\tOPTIMIZED_ICONS[type] = {};\n\n\t\tfor (let icon of icons)\n\t\t{\n\t\t\tICONS_MAP.all[icon] = icon;\n\t\t\tawait optimizeIcon(type, icon);\n\t\t}\n\n\t\tfor (let provider in ICONS_MAP)\n\t\t\tfor (let name in ICONS_MAP[provider])\n\t\t\t\tawait copyIcon(type, provider, name, ICONS_MAP[provider][name]);\n\t}\n}\n\nrun()\n\t.then(() => console.log(\"Done!\"))\n\t.catch(err => console.error(err));\n"]},"metadata":{},"sourceType":"script"}